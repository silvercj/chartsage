'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

export default function DashboardPage() {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [visualizations, setVisualizations] = useState<any[]>([]);
  const router = useRouter();

  useEffect(() => {
    const generateDashboard = async () => {
      try {
        console.log("üîÑ Starting dashboard generation process...");
        
        // Get the file from localStorage
        const fileData = localStorage.getItem('dashboardFile');
        console.log("üì¶ Retrieved file data from localStorage");
        
        if (!fileData) {
          console.error("‚ùå No file data found in localStorage");
          throw new Error('No file data found');
        }

        // Convert base64 to Blob
        console.log("üîÑ Converting base64 to Blob...");
        const base64Data = fileData.split(',')[1];
        const binaryData = atob(base64Data);
        const arrayBuffer = new ArrayBuffer(binaryData.length);
        const uint8Array = new Uint8Array(arrayBuffer);
        for (let i = 0; i < binaryData.length; i++) {
          uint8Array[i] = binaryData.charCodeAt(i);
        }
        const blob = new Blob([arrayBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        const file = new File([blob], 'dashboard.xlsx', { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        console.log("‚úÖ File conversion complete");

        const formData = new FormData();
        formData.append('file', file);
        console.log("üì§ Preparing to send file to server...");

        console.log("üåê Making API request to /generate-dashboard...");
        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/generate-dashboard`, {
          method: 'POST',
          body: formData,
        });

        if (!response.ok) {
          const errorData = await response.json();
          console.error("‚ùå Server error response:", errorData);
          throw new Error(errorData.detail || 'Failed to generate dashboard');
        }

        console.log("‚úÖ Received successful response from server");
        const data = await response.json();
        console.log("üìä Visualization data received:", data);
        
        setVisualizations(data.visualizations);
        console.log("‚úÖ Visualizations state updated");
      } catch (error) {
        console.error("‚ùå Error in dashboard generation:", error);
        setError(error instanceof Error ? error.message : 'Failed to generate dashboard');
      } finally {
        setLoading(false);
        console.log("üèÅ Dashboard generation process completed");
      }
    };

    generateDashboard();
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-500 border-t-transparent mx-auto"></div>
          <h2 className="mt-4 text-xl font-semibold text-gray-900">Generating Dashboard...</h2>
          <p className="mt-2 text-gray-600">This may take a few moments</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="text-red-500 text-4xl mb-4">‚ùå</div>
          <h2 className="text-xl font-semibold text-gray-900">Error Generating Dashboard</h2>
          <p className="mt-2 text-gray-600">{error}</p>
          <button
            onClick={() => router.push('/')}
            className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-4xl mx-auto">
        <div className="mb-8">
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Generated Visualizations</h1>
          <p className="text-gray-600">Below are the visualization specifications generated by AI:</p>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <pre className="whitespace-pre-wrap text-sm text-gray-800">
            {JSON.stringify(visualizations, null, 2)}
          </pre>
        </div>

        <div className="mt-8 flex justify-end">
          <button
            onClick={() => router.push('/')}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Back to Upload
          </button>
        </div>
      </div>
    </div>
  );
} 